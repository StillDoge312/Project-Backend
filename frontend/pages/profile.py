from nicegui import ui
from backend.db import SessionLocal
from backend.models import User

def get_user_from_db(user_id: int):
    db = SessionLocal()
    try:
        return db.query(User).filter(User.id == user_id).first()
    finally:
        db.close()

def update_email(user_id: int, new_email: str):
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email (–∏ –Ω–µ –æ–Ω —Å–∞–º)
        existing_user = db.query(User).filter(User.email == new_email, User.id != user_id).first()
        if existing_user:
            return "exists"

        user = db.query(User).filter(User.id == user_id).first()
        if user:
            user.email = new_email
            db.commit()
            db.refresh(user)
            return True
        return False
    finally:
        db.close()

@ui.page("/profile")
async def profile_page():
    import asyncio
    await asyncio.sleep(0.2)
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    try:
        user_id = int(ui.context.client.query_params.get('user_id', 1))
    except:
        user_id = 1

    user = get_user_from_db(user_id)

    with ui.row().classes("w-full justify-end p-4"):
        with ui.menu() as menu:
            with ui.column().classes("p-4 gap-2"):
                ui.label("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏").classes("text-lg font-bold mb-2")

                email_input = ui.input(
                    "Email", value=user.email if user and user.email else ""
                ).classes("w-64")

                def save_email():
                    result = update_email(user_id, email_input.value)
                    if result == True:
                        ui.notify("Email –æ–±–Ω–æ–≤–ª—ë–Ω", color="positive")
                        menu.close()
                    elif result == "exists":
                        ui.notify("–¢–∞–∫–æ–π email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", color="warning")
                    else:
                        ui.notify("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", color="negative")

                ui.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_email).props("outline").classes("text-green-600")
                ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=menu.close).props("flat")

        ui.button(icon="settings", on_click=menu.open).props("flat round").classes("text-gray-700")

    with ui.card().classes("max-w-lg mx-auto mt-10 p-6 shadow-lg flex flex-col gap-4 items-center"):
        ui.label("–ü—Ä–æ—Ñ–∏–ª—å").classes("text-3xl font-bold mb-2")
        ui.avatar(icon="account_circle", size="80px").classes("mb-4 text-blue-600")

        if user:
            ui.label(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}").classes("text-lg")
            ui.label(f"üìß Email: {user.email if user.email else '–ù–µ —É–∫–∞–∑–∞–Ω'}").classes("text-lg")
            ui.label(f"üîê –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if user.master_key else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}").classes("text-lg")
            ui.label(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at}").classes("text-lg")
        else:
            ui.label("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω").classes("text-red-500")

        ui.separator().classes("my-4 w-full")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Dashboard
        with ui.row().classes("w-full gap-2"):
            ui.button("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏", 
                     on_click=lambda: ui.navigate.to(f"/dashboard?user_id={user_id}")).props(
                "outline unelevated no-caps"
            ).classes("flex-1 bg-blue-100 text-blue-700 hover:bg-blue-200 rounded-lg shadow-md")
            
            ui.button("–í—ã–π—Ç–∏", on_click=lambda: ui.navigate.to("/")).props(
                "flat unelevated no-caps"
            ).classes("flex-1 bg-red-500 text-white hover:bg-red-600 rounded-lg shadow-md")